trigger:
  branches:
    include:
    - vnext
    - master

# This pipeline is meant to build specific branches for deployment. It's not meant to be a part of PR validation.
pr: none

parameters:
- name: isVerbose
  displayName: 'Get verbose output from steps - where configurable'
  type: boolean
  default: false
- name: shouldCleanPostExecution
  displayName: 'Clean all pipeline dirs after the pipeline finishes?'
  type: boolean
  default: true


name: $(Year:yyyy).$(Month).$(DayOfMonth)-r$(Rev:.r)

stages:
- stage: Build
  pool:
    vmImage: ubuntu-latest

    demands: npm
  jobs:
  - job: BuildSamples
    steps:
      - checkout: 'self' 
        clean: true

      - task: NodeTool@0
        displayName: 'Install Node'
        inputs:
          versionSource: 'spec'
          versionSpec: '18.x'

      - task: Bash@3
        displayName: 'Create download artifact per sample (Shell)'
        inputs:
          targetType: 'inline'
          script: |
            create_zips() {
              local rootPath="$1"
              if [ -d "$rootPath" ]; then
                # Get all first-level subdirectories in the specified root path
                subdirectories=$(find "$rootPath" -mindepth 1 -maxdepth 1 -type d)
                for subdirectory in $subdirectories; do
                  # Extract the directory name from the path
                  dirName=$(basename "$subdirectory")

                  # Give each sample a version in its package.json file - for traceability
                  cd "$subdirectory"
                  echo "Setting project version in package.json to $(Build.BuildNumber) for $dirName"
                  npm version $(Build.BuildNumber) --no-git-tag-version

                  # Check if the directory name is already camel-case
                  if [[ "$dirName" =~ ^[A-Z]+[a-z]+([A-Z][a-z]*)*$ ]]; then
                      # If already camel-case, print it as is
                      echo "$dirName"
                  else
                      # Convert to camel-case (capitalize first letters and remove hyphens)
                      dirName=$(echo "$dirName" | sed -E 's/(^|-)([a-z])/\U\2/g')
                  fi
                  
                  echo "Processing directory: $dirName"
                  # Define the name for the zip file
                  zipName="$(Build.ArtifactStagingDirectory)/IgniteUI_WebComponents_ApplicationSample_${dirName}_Source.zip"
                  echo "Creating ZIP: $zipName"

                  # Compress the directory into a ZIP file
                  (cd "$subdirectory" && zip -r "$zipName" .)
                done
              fi
            }

            # Pass 1: All first-level directories in projects/grids/
            create_zips "$(Build.SourcesDirectory)/projects/grids"

            # Pass 2: All first-level directories in projects/charts/
            create_zips "$(Build.SourcesDirectory)/projects/charts"

            echo "All sample projects have been compressed and saved to the artifacts directory."

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Samples Sources zips'
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifact: 'samplesSourcesZips'
          publishLocation: 'pipeline'

      - task: Npm@1
        displayName: 'Register licensed npm registry in .npmrc'
        inputs:
          verbose: ${{ parameters.isVerbose }}
          command: 'custom'
          workingDir: '$(Build.SourcesDirectory)'
          customCommand: 'config -L project set @infragistics:registry=https://packages.infragistics.com/npm/js-licensed/'
          customEndpoint: 'public proget'

      - task: npmAuthenticate@0
        displayName: '[IG Production ProGet] npm authenticate'
        inputs:
          workingFile: '$(Build.SourcesDirectory)/.npmrc'
          customEndpoint: 'public proget'

      - task: Npm@1
        displayName: 'npm install --legacy-peer-deps'
        inputs:
          verbose: ${{ parameters.isVerbose }}
          command: custom
          workingDir: '$(Build.SourcesDirectory)'
          customCommand: 'install --legacy-peer-deps'
          customEndpoint: 'public proget'

      - task: Npm@1
        displayName: 'Install Ignite UI CLI globally'
        inputs:
          verbose: ${{ parameters.isVerbose }}
          command: custom
          workingDir: '$(Build.SourcesDirectory)'
          customCommand: 'install -g igniteui-cli'

      - task: PowerShell@2
        displayName: 'Update vite.config to licensed'
        inputs:
          failOnStderr: true
          showWarnings: true
          workingDirectory: '$(Build.SourcesDirectory)'
          targetType: 'inline'
          script: |
            #Update vite.config.ts
            $viteConfig = Get-Content -Raw ./vite.config.ts
            $updatedViteConfig = $viteConfig -replace 'igniteui-webcomponents-', '@infragistics/igniteui-webcomponents-'
            $updatedViteConfig | Set-Content ./vite.config.ts

      - task: Bash@3
        displayName: 'Run Ignite UI Upgrade in Root and All Project Subdirectories'
        inputs:
          targetType: 'inline'
          script: |
            echo "Running Ignite UI package upgrade at root level..."
            npx ig upgrade-packages --skip-install

            echo "Running Ignite UI package upgrade in all project subdirectories..."
            for dir in $(Build.SourcesDirectory)/projects/*/; do
              if [ -d "$dir" ]; then
                if [ -f "$dir/.igniteui-cli.json" ]; then
                  echo "Processing Ignite UI project: $dir"
                  (cd "$dir" && npx ig upgrade-packages --skip-install)
                else
                  echo "Skipping $dir (not an Ignite UI CLI project)"
                fi
              fi
            done

      - task: Npm@1
        displayName: 'npm install --legacy-peer-deps'
        inputs:
          verbose: ${{ parameters.isVerbose }}
          command: custom
          workingDir: '$(Build.SourcesDirectory)'
          customCommand: 'install --legacy-peer-deps'

      - task: Bash@3
        displayName: 'Replace IG trial packages with licensed ones in TSX/TS files'
        inputs:
          targetType: 'inline'
          workingDirectory: '$(Build.SourcesDirectory)'
          script: |
            #!/bin/bash
            set -euo pipefail

            # Find all TSX/TS files
            FILES=$(find . -type f \( -name "*.ts" -o -name "*.tsx" \))

            for FILE in $FILES; do
              echo "Processing $FILE"

              # Replace igniteui-webcomponents-* imports
              sed -i -E "s|(from|import)[[:space:]]+['\"]igniteui-webcomponents-([^'\"]+)['\"]|\1 \"@infragistics/\2\"|g" "$FILE"

              # Replace dockmanager imports
              sed -i -E "s|(from|import)[[:space:]]+['\"]dockmanager[^'\"]*['\"]|\1 \"@infragistics/dockmanager\"|g" "$FILE"
            done

      - task: Npm@1
        displayName: 'npm run build:ci'
        inputs:
          verbose: ${{ parameters.isVerbose }}
          command: custom
          workingDir: '$(Build.SourcesDirectory)'
          customCommand: 'run build:ci'

      - task: PublishPipelineArtifact@1
        displayName: 'Publish app'
        inputs:
          targetPath: '$(Build.SourcesDirectory)/dist'
          artifact: 'dist.grid-demos-wc'
          publishLocation: 'pipeline'

      - ${{ if eq(parameters.shouldCleanPostExecution, true) }}:
        - task: PostBuildCleanup@4
